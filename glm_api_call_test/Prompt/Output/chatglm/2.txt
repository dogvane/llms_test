------ prompt ------
将下面段落翻译成中文，对于代码，指令，不要进行翻译，以下是正文：
------ ------
类型转换
在.NET 8中，已经进行了一系列改进以提高类型转换的性能。

dotnet/runtime#75816通过使用is T[]当T是密封类型时，避免了使用CORINFO_HELP_ISINSTANCEOFARRAY助手来确定对象是否属于指定数组类型。但是当T是密封类型时，JIT可以通过不使用该助手而直接发出它，生成代码，好像它是在obj is not null && obj.GetType() == typeof(T[]).一种类型的动态PGO，所以这个基准测试突出了使用动态PGO的改进。

// dotnet run -c Release -f net7.0 --filter "*"

使用BenchmarkDotNet的属性，使用.NET 7.0的Release版本，并使用通配符过滤。

使用BenchmarkDotNet配置器
.NET 7.0版本

测试类
Tests

私有变量
_obj：

```
private readonly object _obj = new string[1];
```

Benchmark
IsStringArray

```
[Benchmark]
public bool IsStringArray() => _obj is string[];
```

IsStringArray
.NET 7版本

```
.NET 7版本

Mean (平均值)
Ratio (比率)
IsStringArray	.NET 7	1.2290 ns	1.00
IsStringArray	.NET 8 w/o PGO	0.2365 ns	0.19
IsStringArray	.NET 8	0.0825 ns	0.07

移动到下一个基准测试：

// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0

使用BenchmarkDotNet的属性，使用.NET 7.0的Release版本，并使用通配符过滤。

测试类
Tests

私有变量
string[] _strings = new string[1];

```
private readonly string[] _strings = new string[1];
```

Benchmark
Get1

```
[Benchmark]
public string Get1() => _strings[0];
```

Get2

```
[Benchmark]
public string Get2() => Volatile.Read(ref _strings[0]);
```

在.NET 7中，我们得到这个汇编程序：

; Tests.Get1()
       sub       rsp,28
       mov       rax,[rcx+8]
       cmp       dword ptr [rax+8],0
       jbe       short M00_L00
       mov       rax,[rax+10]
       add       rsp,28
       ret
M00_L00:
       call      CORINFO_HELP_RNGCHKFAIL
       int       3
; Total bytes of code 29

; Tests.Get2()
       sub       rsp,28
       mov       rcx,[rcx+8]
       xor       edx,edx
       mov       r8,offset MT_System.String
       call      CORINFO_HELP_LDELEMA_REF
       nop
       add       rsp,28
       ret
; Total bytes of code 31
```

注意：在这里，我们使用了.NET 7的动态类型PGO。在.NET 8中，我们使用了静态类型PGO，并且我们使用了一个静态变量_strings来存储一个字符串数组。

------ ------
原文长度:2808    译文长度:1804

------ prompt ------
翻译下面段落成中文，不要翻译代码，指令。以下是正文： 
------ ------
编译器
在.NET 8中，各种改进都针对性地对 casting 的性能进行了优化。

.NET runtime #75816 通过使用 is T[] 当 T 是封装的数组时，提高了使用 is T[] 的性能。JIT 使用了一个名为 CORINFO_HELP_ISINSTANCEOFARRAY 的辅助来确定对象是否属于指定数组类型，但是当 T 是封装的时候，JIT 可以通过不要使用这个辅助来生成代码，就像对象 is not null 并且 obj.GetType() == typeof(T[]). 这也是一个使用动态 PGO 可以看到显著改进的例子，所以基准测试中包括它和不包括它两种情况。

// dotnet run -c Release -f net7.0 --filter "*"

使用BenchmarkDotNet的属性
使用BenchmarkDotNet配置器
使用BenchmarkDotNet环境
使用BenchmarkDotNet运行器

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}

Method                Job         Mean        Ratio
IsStringArray       .NET 7        1.2290 ns   1.00
IsStringArray       .NET 8 w/o PGO     0.2365 ns   0.19
IsStringArray       .NET 8        0.0825 ns   0.07

接下来，让我们考虑这个基准测试：

// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0

使用BenchmarkDotNet的属性
使用BenchmarkDotNet配置器
使用BenchmarkDotNet环境
使用BenchmarkDotNet运行器

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

------ ------
原文长度:2808    译文长度:1896

------ prompt ------
Translate the following paragraph into Chinese. Do not translate the code and instructions. Here is the main text:
------ ------
抛出
各种改进都针对 .NET 8 中的 casting 进行了优化。

.NET/runtime#75816 通过使用 is T[] 当 T 是封装的时优化了使用 T[] 的性能。JIT 使用了一个名为 CORINFO_HELP_ISINSTANCEOFARRAY 的助手来确定对象是否属于指定数组的类型，但是当 T 是封装的时候，JIT 可以通过不使用该助手而直接发出它，生成代码就像对象不为空且对象获取的类型为 T[] 一样。这是另一个动态 PGO 有显著影响的例子，因此基准测试重点关注有和没有它的改善。

// dotnet run -c Release -f net7.0 --filter "*"

使用BenchmarkDotNet 的属性
使用BenchmarkDotNet 的配置
使用BenchmarkDotNet 的环境
使用BenchmarkDotNet 的作业
使用BenchmarkDotNet 的运行

var config = DefaultConfig.Instance
.AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
.AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
.AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}

方法
作业
平均值
方差

IsStringArray
.NET 7
1.2290 ns
1.00

IsStringArray
.NET 8 w/o PGO
0.2365 ns
0.19

IsStringArray
.NET 8
0.0825 ns
0.07

继续，考虑这个基准：

// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0

使用BenchmarkDotNet 的属性
使用BenchmarkDotNet 的配置
使用BenchmarkDotNet 的环境
使用BenchmarkDotNet 的作业
使用BenchmarkDotNet 的运行

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

------ ------
原文长度:2808    译文长度:1813

----性能----
top_p:1  temperature: 1
翻译耗时: 110.0062425sec 负载:62.462265 已用显存:13761.217 显卡功耗:253.53972

