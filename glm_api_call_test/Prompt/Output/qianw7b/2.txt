------ prompt ------
将下面段落翻译成中文，对于代码，指令，不要进行翻译，以下是正文：
------ ------
.NET 8 中的 casting 改进包括提高使用 is T[] 当 T 是密封类型时的性能。JIT 使用一个名为 CORINFO_HELP_ISINSTANCEOFARRAY 的辅助函数来确定对象是否为指定数组类型，但当 T 是密封类型时，JIT 可以直接生成不使用该辅助函数的代码，就像 obj 不为 null 且 obj.GetType() == typeof(T[]) 一样。这是动态 PGO 可以产生可测量影响的另一个示例，因此基准测试强调了带有和不带有动态 PGO 的改进。
// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0
使用 BenchmarkDotNet 运行基准测试：
```csharp
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);
```

[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
Get1 这里只是读取并返回数组的第 0 个元素。Get2 这里返回一个引用到数组的第 0 个元素。这是我们在 .NET 7 中得到的汇编代码：
```sql
; Tests.Get1()
       sub       rsp,28
       mov       rax,[rcx+8]
       cmp       dword ptr [rax+8],0
       jbe       short M00_L00
       mov       rax,[rax+10]
       add       rsp,28
       ret
M00_L00:
       call      CORINFO_HELP_RNGCHKFAIL
       int       3
; Total bytes of code 29

; Tests.Get2()
       sub       rsp,28
       mov       rcx,[rcx+8]
       xor       edx,edx
       mov       r8,offset MT_System.String
       call      CORINFO_HELP_LDELEMA_REF
       nop
       add       rsp,28
       ret
; Total bytes of code 31
```

------ ------
原文长度:2808    译文长度:1728

------ prompt ------
翻译下面段落成中文，不要翻译代码，指令。以下是正文： 
------ ------
.NET 8 中的 casting 改进包括提高使用 is T[] 当 T 是密封类型时的性能。JIT 使用一个名为 CORINFO_HELP_ISINSTANCEOFARRAY 的辅助函数来确定对象是否为指定数组类型，但当 T 是密封类型时，JIT 可以直接生成不使用该辅助函数的代码，就像 obj 不为 null 且 obj.GetType() == typeof(T[]) 一样。这是动态 PGO 可以产生可测量影响的另一个示例，因此基准测试强调了带有和不带有动态 PGO 的改进。
// dotnet run -c Release -f net7.0 --filter "*"

使用 BenchmarkDotNet 的默认配置进行基准测试：

```csharp
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Environments;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);
```

[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
接下来考虑这个基准测试：

```csharp
// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0

using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args);

[HideColumns("Error", "StdDev", "Median", "RatioSD")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly string[] _strings = new string[1];

    [Benchmark]
    public string Get1() => _strings[0];

    [Benchmark]
    public string Get2() => Volatile.Read(ref _strings[0]);
}
Get1 在这里只是读取并返回数组的第 0 个元素。Get2 在这里返回一个引用到数组的第 0 个元素。这是我们在 .NET 7 中获得的汇编代码：

; Tests.Get1()
       sub       esp,28
       mov       rax,[rcx+8]
       cmp       dword ptr [rax+8],0
       jbe       short M00_L00
       mov       rax,[rax+10]
       add       esp,28
       ret
M00_L00:
       call      CORINFO_HELP_RNGCHKFAIL
       int       3
; Total bytes of code 29

; Tests.Get2()
       sub       esp,28
       mov       rcx,[rcx+8]
       xor       edx,edx
       mov       r8,offset MT_System.String
       call      CORINFO_HELP_LDELEMA_REF
       nop
       add       esp,28
       ret
; Total bytes of code 31
```

------ ------
原文长度:2808    译文长度:2336

------ prompt ------
Translate the following paragraph into Chinese. Do not translate the code and instructions. Here is the main text:
------ ------
.NET 8 中对 casting 的性能进行了改进。

在 .NET 8 中，使用 is T[] 时，当 T 是密封类型时，JIT 可以直接生成代码，而不需要使用 CORINFO_HELP_ISINSTANCEOFARRAY 帮助程序。这使得动态 PGO 对性能的影响更加明显，因此基准测试强调了改进前后的性能差异。

// dotnet run -c Release -f net7.0 --filter "*"

使用 BenchmarkDotNet 运行基准测试：

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
在 .NET 7 中，IsStringArray 方法的平均执行时间为 1.2290 ns，而在 .NET 8 中，没有启用 PGO 的情况下，平均执行时间为 0.2365 ns，启用 PGO 的情况下，平均执行时间为 0.0825 ns。这表明动态 PGO 对于 casting 的性能改进非常明显。

// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0

使用 BenchmarkDotNet 运行基准测试：

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

[HideColumns("Error", "StdDev", "Median", "RatioSD")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly string[] _strings = new string[1];

    [Benchmark]
    public string Get1() => _strings[0];

    [Benchmark]
    public string Get2() => Volatile.Read(ref _strings[0]);
}
在 .NET 7 中，Get1 方法的平均执行时间为 1.2290 ns，而在 .NET 8 中，没有启用 PGO 的情况下，平均执行时间为 0.2365 ns，启用 PGO 的情况下，平均执行时间为 0.0825 ns。这表明动态 PGO 对于 casting 的性能改进非常明显。

在 .NET 8 中，Get2 方法的平均执行时间为 0.2365 ns，而在 .NET 7 中，平均执行时间为 0.2365 ns。这表明在 .NET 8 中，Get2 方法的性能与 .NET 7 相似。

------ ------
原文长度:2808    译文长度:2122

----性能----
top_p:0.1  temperature: 0.01
翻译耗时: 219.7554346sec 负载:40.943127 已用显存:20023.568 显卡功耗:184.7974

