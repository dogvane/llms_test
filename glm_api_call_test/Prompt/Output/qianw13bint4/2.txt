------ prompt ------
将下面段落翻译成中文，对于代码，指令，不要进行翻译，以下是正文：
------ ------
.NET 8中改进了Casting的性能。dotnet/runtime#75816改进了T[]中T是密封的情况下的using is T[]的性能。JIT使用了一个名为CORINFO_HELP_ISINSTANCEOFARRAY的助手来确定一个对象是否为特定数组类型，但当T是密封的时，JIT可以不使用助手直接生成代码，就像这样：obj is not null && obj.GetType() == typeof(T[])。这是另一个动态PGO可以产生可测量影响的例子，因此基准测试突出了有和没有PGO时的改进。

```java
// dotnet run -c Release -f net7.0 --filter "*"

using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Environments;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
Method	Job	Mean	Ratio
IsStringArray	.NET 7	1.2290 ns	1.00
IsStringArray	.NET 8 w/o PGO	0.2365 ns	0.19
IsStringArray	.NET 8	0.0825 ns	0.07
接下来，考虑这个基准测试：

// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0

using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args);

[HideColumns("Error", "StdDev", "Median", "RatioSD")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly string[] _strings = new string[1];

    [Benchmark]
    public string Get1() => _strings[0];

    [Benchmark]
    public string Get2() => Volatile.Read(ref _strings[0]);
}
Get1在这里只是从数组中读取并返回第0个元素。Get2在这里是返回数组中第0个元素的引用。这是我们在.NET 7中得到的汇编代码：

; Tests.Get1()
       sub       rsp,28
       mov       rax,[rcx+8]
       cmp       dword ptr [rax+8],0
       jbe       short M00_L00
       mov       rax,[rax+10]
       add       rsp,28
       ret
M00_L00:
       call      CORINFO_HELP_RNGCHKFAIL
       int       3
; Total bytes of code 29

; Tests.Get2()
       sub       rsp,28
       mov       rcx,[rcx+8]
       xor       edx,edx
       mov       r8,offset MT_System.String
       call      CORINFO_HELP_LDELEMA_REF
       nop
       add       rsp,28
       ret
; Total bytes of code 31
```

------ ------
原文长度:2808    译文长度:2431

------ prompt ------
翻译下面段落成中文，不要翻译代码，指令。以下是正文： 
------ ------
.NET 8对Casting进行了多种改进，以提高性能。
dotnet/runtime#75816提高了当T是密封类型时，使用is T[]的性能。JIT使用CORINFO_HELP_ISINSTANCEOFARRAY助手来确定对象是否为指定的数组类型，但是当T是密封类型时，JIT可以不使用助手直接生成代码，生成的代码就像写obj is not null && obj.GetType() == typeof(T[])一样。这又是一个动态PGO可以测量影响的例子，所以基准测试突出了使用和不使用动态PGO时的改进。
// dotnet run -c Release -f net7.0 --filter "*"
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Environments;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);
[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];
    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
方法	工作项	平均值	比率
IsStringArray	.NET 7	1.2290 ns	1.00
IsStringArray	.NET 8 w/o PGO	0.2365 ns	0.19
IsStringArray	.NET 8	0.0825 ns	0.07
继续看这个基准测试：
// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args);
[HideColumns("Error", "StdDev", "Median", "RatioSD")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly string[] _strings = new string[1];
    [Benchmark]
    public string Get1() => _strings[0];
    [Benchmark]
    public string Get2() => Volatile.Read(ref _strings[0]);
}
Get1这里只是从数组中读取并返回第0个元素。Get2在这里返回数组第0个元素的引用。这是在.NET 7中得到的汇编代码：
; Tests.Get1()
       sub       rsp,28
       mov       rax,[rcx+8]
       cmp       dword ptr [rax+8],0
       jbe       short M00_L00
       mov       rax,[rax+10]
       add       rsp,28
       ret
M00_L00：
       call      CORINFO_HELP_RNGCHKFAIL
       int       3
; Total bytes of code 29
; Tests.Get2()
       sub       rsp,28
       mov       rcx,[rcx+8]
       xor       edx,edx
       mov       r8,offset MT_System.String
       call      CORINFO_HELP_LDELEMA_REF
       nop
       add

------ ------
原文长度:2808    译文长度:2344

------ prompt ------
Translate the following paragraph into Chinese. Do not translate the code and instructions. Here is the main text:
------ ------
.NET 8对投射进行了许多改进，以提高其性能。dotnet/runtime#75816改进了当T为密封类型时，使用is T[]的性能。JIT使用CORINFO_HELP_ISINSTANCEOFARRAY助手来确定对象是否为指定的数组类型，但当T为密封类型时，JIT可以不使用助手而直接生成代码，生成的代码与以下代码相同：obj is not null && obj.GetType() == typeof(T[])。这又是动态PGO影响的一个例子，所以基准测试突出了使用和不使用动态PGO的改进。
// dotnet run -c Release -f net7.0 --filter "*"
使用BenchmarkDotNet.Attributes；
使用BenchmarkDotNet.Configs；
使用BenchmarkDotNet.Environments；
使用BenchmarkDotNet.Jobs；
使用BenchmarkDotNet.Running；
var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config)；
[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")];
[DisassemblyDiagnoser(maxDepth: 0)]；
public class Tests
{
    private readonly object _obj = new string[1]；

    [Benchmark]
    public bool IsStringArray() => _obj is string[]；
}
Method	Job	Mean	Ratio
IsStringArray	.NET 7	1.2290 ns	1.00
IsStringArray	.NET 8 w/o PGO	0.2365 ns	0.19
IsStringArray	.NET 8	0.0825 ns	0.07
接下来考虑这个基准测试：
// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0
使用BenchmarkDotNet.Attributes；
使用BenchmarkDotNet.Running；
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args)；
[HideColumns("Error", "StdDev", "Median", "RatioSD")];
[DisassemblyDiagnoser(maxDepth: 0)]；
public class Tests
{
    private readonly string[] _strings = new string[1]；


    [Benchmark]
    public string Get1() => _strings[0]；


    [Benchmark]
    public string Get2() => Volatile.Read(ref _strings[0])；
}
Get1在这里只是从数组中读取并返回第0个元素。Get2在这里返回数组中第0个元素的ref。以下是我们得到的.NET 7中的汇编代码：
; Tests.Get1()
       sub       rsp,28
       mov       rax,[rcx+8]
       cmp       dword ptr [rax+8],0
       jbe       short M00_L00
       mov       rax,[rax+10]
       add       rsp,28
       ret
M00_L00：
       call      CORINFO_HELP_RNGCHKFAIL
       int       3
; Total bytes of code 29

; Tests.Get2()
       sub       rsp,28
       mov       rcx,[rcx+8]
       xor       edx,edx
       mov       r8,offset

------ ------
原文长度:2808    译文长度:2252

----性能----
top_p:0.85  temperature: 0.01
翻译耗时: 239.2769553sec 负载:37.33913 已用显存:13986.865 显卡功耗:106.566696

