------ prompt ------
将下面段落翻译成中文，对于代码，指令，不要进行翻译，以下是正文：
------ ------
Casting性能改进

在.NET 8中，对casting的性能进行了多项优化。

dotnet/runtime#75816改进了当T为密封类型时使用is T[]的情况。JIT（Just-In-Time编译器）使用CORINFO_HELP_ISINSTANCEOFARRAY辅助方法来判断对象是否为特定数组类型，但当T是密封的，JIT可以不使用该辅助，直接生成类似于`if (obj != null && obj.GetType() == typeof(T[]))`的代码。动态多目标优化（Dynamic Profile Guided Optimization，PGO）在这里也有所体现，因此基准测试展示了有和无PGO的性能差异。

```bash
dotnet run -c Release -f net7.0 --filter "*"

using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Environments;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);
```

接下来的基准测试展示了两个获取数组元素的方法：

```bash
dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0

using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args);
```

```csharp
[HideColumns("Error", "StdDev", "Median", "RatioSD")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly string[] _strings = new string[1];

    [Benchmark]
    public string Get1() => _strings[0]; // 直接读取并返回数组的第一个元素

    [Benchmark]
    public string Get2() => Volatile.Read(ref _strings[0]); // 返回指向数组第一个元素的引用
}
```

在.NET 7中，Get1的汇编代码如下：

```assembly
; Tests.Get1()
       sub       rsp,28
       mov       rax,[rcx+8]   ; Load the address of the first element
       cmp       dword ptr [rax+8],0  ; Check if it's zero
       jbe       short M00_L00
       mov       rax,[rax+10]  ; Load the value
       add       rsp,28
       ret
M00_L00:
       call      CORINFO_HELP_RNGCHKFAIL
       int       3
; Total bytes of code 29
```

而Get2的代码稍微复杂一些，包括了内存加载和引用操作：

```assembly
; Tests.Get2()
       sub       rsp,28
       mov       rcx,[rcx+8]   ; Load the address of the first element
       xor       edx,edx       ; Clear edx for load
       mov       r8,offset MT_System.String  ; Load the reference type address
       call      CORINFO_HELP_LDELEMA_REF  ; Load the reference
       nop
       add       rsp,28
       ret
; Total bytes of code 31
```

可以看到，Get1的代码量较少，而Get2需要额外处理引用操作，这导致了性能上的差异。

------ ------
原文长度:2808    译文长度:2423

------ prompt ------
翻译下面段落成中文，不要翻译代码，指令。以下是正文： 
------ ------
.NET 8 中对 casting 性能进行了多项改进：

dotnet/runtime#75816 改进了当 T 类型为密封时使用 `is T[]` 的性能。JIT（Just-In-Time 编译器）有一个名为 CORINFO_HELP_ISINSTANCEOFARRAY 的辅助工具来判断对象是否为指定数组类型，但当 T 是密封的，JIT 可以直接生成代码，而不是使用辅助工具，就像 `if (obj != null && obj.GetType() == typeof(T[]))` 那样。动态多目标优化（Dynamic Profile Guided Optimization, PGO）在这里也有所体现，因此基准测试展示了有和无 PGO 的改进情况。

```sh
dotnet run -c Release -f net7.0 --filter "*"
```

使用 BenchmarkDotNet 运行基准测试：

```csharp
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Environments;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);
```

测试类（隐藏部分列）：

```csharp
[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
```

这里有两个基准测试方法：`Get1` 和 `Get2`。`Get1` 直接读取并返回数组的第一个元素，`Get2` 返回数组第一个元素的引用。在 .NET 7 中的汇编代码如下：

- `Get1`：
   ```asm
   sub       rsp,28
   mov       rax,[rcx+8]
   cmp       dword ptr [rax+8],0
   jbe       short M00_L00
   mov       rax,[rax+10]
   add       rsp,28
   ret
   ```
   共 29 字节代码

- `Get2`：
   ```asm
   sub       rsp,28
   mov       rcx,[rcx+8]
   xor       edx,edx
   mov       r8,offset MT_System.String
   call      CORINFO_HELP_LDELEMA_REF
   nop
   add       rsp,28
   ret
   ```
   共 31 字节代码

可以看到，`Get2` 比 `Get1` 多了 2 字节，因为它包含了引用操作的额外开销。

------ ------
原文长度:2808    译文长度:1846

------ prompt ------
Translate the following paragraph into Chinese. Do not translate the code and instructions. Here is the main text:
------ ------
投射

在.NET 8中，我们对投射性能进行了多项改进。

dotnet/runtime#75816提高了当T为密封类型时使用is T[]的性能。JIT（Just-In-Time编译器）使用CORINFO_HELP_ISINSTANCEOFARRAY辅助方法来判断对象是否为特定数组类型，但当T是密封的，JIT可以不使用该辅助，直接生成类似于`if (obj != null && obj.GetType() == typeof(T[]))`的代码。动态多级并行优化（Dynamic Profile Guided Optimization，PGO）在这里产生了可测量的影响，因此基准测试展示了有和无PGO的改进情况。

```sh
// dotnet run -c Release -f net7.0 --filter "*"

using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Configs;
using BenchmarkDotNet.Environments;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);
```

```csharp
[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
```

方法   作业   平均值   比例
IsStringArray .NET 7  1.2290 ns  1.00
IsStringArray .NET 8 w/o PGO  0.2365 ns  0.19
IsStringArray .NET 8  0.0825 ns  0 接下来看这个基准测试：

```sh
// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0

using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args);
```

```csharp
[HideColumns("Error", "StdDev", "Median", "RatioSD")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly string[] _strings = new string[1];

    [Benchmark]
    public string Get1() => _strings[0]; // 直接读取数组元素
    [Benchmark]
    public string Get2() => Volatile.Read(ref _strings[0]); // 返回引用到数组元素
}
```

这里，Get1只是简单地从数组中读取并返回第0个元素，而Get2返回的是该元素的引用。以下是.NET 7下的汇编代码：

```asm
; Tests.Get1()
       sub       rsp,28
       mov       rax,[rcx+8]
       cmp       dword ptr [rax+8],0
       jbe       short M00_L00
       mov       rax,[rax+10]
       add       rsp,28
       ret
M00_L00:
       call      CORINFO_HELP_RNGCHKFAIL
       int       3
; Total bytes of code 29

; Tests.Get2()
       sub       rsp,28
       mov       rcx,[rcx+8]
       xor       edx,edx
       mov       r8,offset MT_System.String
       call      CORINFO_HELP_LDELEMA_REF
       nop
       add       rsp,28
       ret
; Total bytes of code 31
```

可以看到，Get1的代码量比Get2少，因为Get1不需要处理引用操作。

------ ------
原文长度:2808    译文长度:2585

----性能----
top_p:0.1  temperature: 0.01
翻译耗时: 134.1062518sec 负载:60.838463 已用显存:19344.469 显卡功耗:243.53923

