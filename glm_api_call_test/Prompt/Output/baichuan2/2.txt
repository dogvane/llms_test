------ prompt ------
将下面段落翻译成中文，对于代码，指令，不要进行翻译，以下是正文：
------ ------
铸造
在.NET 8中，为了提高铸造性能进行了各种改进。

在dotnet/runtime#75816中，改善了当T是密封的时使用is T[]的性能。有一个JIT使用的CORINFO_HELP_ISINSTANCEOFARRAY帮助器来确定一个对象是否是指定的数组类型，但是当T是密封的时，JIT可以替代地在没有帮助器的情况下发出它，生成就好像它是像这样编写的代码：obj is not null && obj.GetType() == typeof(T[])。这是另一个动态PGO有可测量影响的例子，因此基准测试突出了有和无它的改进。

// dotnet run -c Release -f net7.0 --filter "*"

使用BenchmarkDotNet.Attributes;
使用BenchmarkDotNet.Configs;
使用BenchmarkDotNet.Environments;
使用BenchmarkDotNet.Jobs;
使用BenchmarkDotNet.Running;

定义config为DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
方法	作业	平均	比率
IsStringArray	.NET 7	1.2290纳秒	1.00
IsStringArray	.NET 8 w/o PGO	0.2365纳秒	0.19
IsStringArray	.NET 8	0.0825纳秒	0.07
将以下段落翻译成中文：

移动R8到MT_System.String的偏移量。调用CORINFO_HELP_LDELEMA_REF。空操作。将RSP加28。返回。

代码总字节数为31。

------ ------
原文长度:2808    译文长度:1380

------ prompt ------
翻译下面段落成中文，不要翻译代码，指令。以下是正文： 
------ ------
铸造
在.NET 8中，为了提高铸造的性能，进行了各种改进。

在dotnet/runtime#75816中，改善了当T是密封的时使用is T[]的性能。有一个JIT使用的CORINFO_HELP_ISINSTANCEOFARRAY帮助器来确定一个对象是否是指定的数组类型，但是当T是密封的时，JIT可以替代地在没有帮助器的情况下发出它，生成就好像它是像这样编写的：obj不是null且obj.GetType() == typeof(T[])。这是另一个动态PGO有可测量影响的例子，因此基准测试突出了有和无它的改进。

// dotnet run -c Release -f net7.0 --filter "*"

使用BenchmarkDotNet.Attributes;
使用BenchmarkDotNet.Configs;
使用BenchmarkDotNet.Environments;
使用BenchmarkDotNet.Jobs;
使用BenchmarkDotNet.Running;

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
方法	作业	平均	比率
IsStringArray	.NET 7	1.2290纳秒	1.00
IsStringArray	.NET 8 w/o PGO	0.2365纳秒	0.19
IsStringArray	.NET 8	0.0825纳秒	0.07
接下来，考虑这个基准测试：

// dotnet run -c Release -f net7.0 --filter "*" --runtimes net7.0 net8.0

使用BenchmarkDotNet.Attributes;
使用BenchmarkDotNet.Running;

BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args);

[HideColumns("Error", "StdDev", "Median", "RatioSD")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly string[] _strings = new string[1];

    [Benchmark]
    public string Get1() => _strings[0];

    [Benchmark]
    public string Get2() => Volatile.Read(ref _strings[0]);
}
Get1只是从数组读取并返回第0个元素。Get2从这里返回数组的第0个元素的ref。这是我们在.NET 7中得到的汇编：

; Tests.Get1()
      子        rsp,28
      移动       rax,[rcx+8]
      比较       dword ptr [rax+8],0
      jbe       short M00_L00
      移动       rax,[rax+10]
      添加       rsp,28
      返回到内核
M00_L00:
      调用       CORINFO_HELP_RNGCHKFAIL
      int       3
; 代码总字节数 29

; Tests.Get2()
      子        rsp,28
      移动       rcx,[rcx+8]
       异或       edx,edx
在这个示例中，我们可以看到使用Volatile.Read的性能比is操作更好，因为它不需要额外的内存读取。然而，这仍然是一个小样本，所以我们需要进行更多的测试来确认这一点。
将以下段落翻译成中文：

将MT_System.String的地址存储在r8中。调用CORINFO_HELP_LDELEMA_REF函数。空操作。将rsp指针加28。返回。代码总字节数为31。

------ ------
原文长度:2808    译文长度:2372

------ prompt ------
Translate the following paragraph into Chinese. Do not translate the code and instructions. Here is the main text:
------ ------
以下是这段文字的中文翻译：

在.NET 8中，为了提高铸造的性能，进行了各种改进。

在dotnet/runtime#75816中，改善了当T是密封的时使用is T[]的性能。有一个JIT使用的CORINFO_HELP_ISINSTANCEOFARRAY帮助器，以确定一个对象是否为指定的数组类型，但当T是密封的时，JIT可以替代使用该帮助器，生成如同编写obj is not null && obj.GetType() == typeof(T[])一样的代码。这是另一个动态PGO有可测量影响的例子，因此基准测试突出了有和无它的改进。

// 使用dotnet运行-c Release-f net7.0--filter "*"

使用BenchmarkDotNet.Attributes;
使用BenchmarkDotNet.Configs;
使用BenchmarkDotNet.Environments;
使用BenchmarkDotNet.Jobs;
使用BenchmarkDotNet.Running;

var config = DefaultConfig.Instance
    .AddJob(Job.Default.WithId(".NET 7").WithRuntime(CoreRuntime.Core70).AsBaseline())
    .AddJob(Job.Default.WithId(".NET 8 w/o PGO").WithRuntime(CoreRuntime.Core80).WithEnvironmentVariable("DOTNET_TieredPGO", "0"))
    .AddJob(Job.Default.WithId(".NET 8").WithRuntime(CoreRuntime.Core80));
BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args, config);

[HideColumns("Error", "StdDev", "Median", "RatioSD", "EnvironmentVariables", "Runtime")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly object _obj = new string[1];

    [Benchmark]
    public bool IsStringArray() => _obj is string[];
}
方法	作业	平均	比率
IsStringArray	.NET 7	1.2290纳秒	1.00
IsStringArray	.NET 8 w/o PGO	0.2365纳秒	0.19
IsStringArray	.NET 8	0.0825纳秒	0.07
接下来考虑这个基准测试：

// 使用dotnet运行-c Release-f net7.0--filter "*"--runtimes net7.0 net8.0

使用BenchmarkDotNet.Attributes;
使用BenchmarkDotNet.Running;

BenchmarkSwitcher.FromAssembly(typeof(Tests).Assembly).Run(args);

[HideColumns("Error", "StdDev", "Median", "RatioSD")]
[DisassemblyDiagnoser(maxDepth: 0)]
public class Tests
{
    private readonly string[] _strings = new string[1];

    [Benchmark]
    public string Get1() => _strings[0];

    [Benchmark]
    public string Get2() => Volatile.Read(ref _strings[0]);
}
Get1只是从数组读取并返回第0个元素。Get2从这里返回数组中第0个元素的引用。这是我们在.NET 7中得到的结果：

; Tests.Get1()
     子        rsp,28
     移动       rax,[rcx+8]
     比较       dword ptr [rax+8],0
      jbe       short M00_L00
     移动       rax,[rax+10]
     添加       rsp,28
     退回
M00_L00:
     调用      CORINFO_HELP_RNGCHKFAIL
     整数       3
; 代码总字节数 29

; Tests.Get2()
     子        rsp,28
     移动       rcx,[rcx+8]
        xor       edx,edx
在这个示例中，我们可以看到，使用Volatile.Read而不是直接访问数组元素可以显著提高性能。这是因为Volatile.Read确保在获取引用时对其他线程的更改进行刷新。
将以下段落翻译成中文。不要翻译代码和说明。以下是主要文本：

移动r8，偏移量MT_System.String
调用CORINFO_HELP_LDELEMA_REF
空操作
添加rsp，28
返回
；代码总字节数31

------ ------
原文长度:2808    译文长度:2382

----性能----
top_p:0.95  temperature: 0.1
翻译耗时: 854.0341945sec 负载:35.65812 已用显存:20678.006 显卡功耗:80.05147

