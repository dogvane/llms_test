以下是 "--query-gpu" 选项可用的查询属性列表：

  * "timestamp"：查询时间戳，格式为 "YYYY/MM/DD HH:MM:SS.msec"。
  * "driver_version"：安装的 NVIDIA 显示驱动程序的版本号。这是一个由字母和数字组成的可选字符串。
  * "vgpu_driver_capability" 属性：获取关于驱动程序级别限制的信息。
  * "vgpu_driver_capability.heterogenous_multivGPU"：是否支持异构多显卡。
  * "count"：系统中 NVIDIA GPU 的数量。
  * "name" 或 "gpu_name"：GPU 的官方产品名称。这是一个由字母和数字组成的可选字符串。对于所有产品。
  * "serial" 或 "gpu_serial"：此数字与每个板子上的物理编号匹配。这是一个全局唯一不可变的字母和数字字符串。
  * "uuid" 或 "gpu_uuid"：此值是 GPU 的全局唯一不可变字母和数字标识符。它与板子上的任何物理标签无关。
  * "pci.bus_id" 或 "gpu_bus_id"：PCI 通道 ID，以十六进制表示为 "domain:bus:device.function"。
  * "pci.domain"：PCI 层次号，以十六进制表示。
  * "pci.bus"：PCI 通道号，以十六进制表示。
  * "pci.device"：PCI 设备号，以十六进制表示。
  * "pci.device_id"：PCI 维护设备 ID，以十六进制表示。
  * "pci.sub_device_id"：PCI 系统子设备 ID，以十六进制表示。

关于 "vgpu_device_capability" 属性的查询信息：

  * "vgpu_device_capability.fractional_multiVgpu"：可使用在多显卡配置中的分数级多显卡配置。
  * "vgpu_device_capability.heterogeneous_timeSlice_profile"：支持同时执行具有不同类型的异步时间片显卡配置。
  * "vgpu_device_capability.heterogeneous_timeSlice_sizes"：支持同时执行具有不同帧缓冲区大小的异步时间片显卡配置。
  * "pcie.link.gen.current"：当前 PCI-E 通道生成。这些可能会在 GPU 未使用时减少。已过时，使用 "pcie.link.gen.gpucurrent" 替代。
  * "pcie.link.gen.gpucurrent"：当前 PCI-E 通道生成。这些可能会在 GPU 未使用时减少。
  * "pcie.link.gen.max"：该 GPU 和系统配置可能支持的最大 PCI-E 通道生成。例如，如果 GPU 支持更高的 PCI-E 通道代，那么此报告系统 PCI-E 通道代。
  * "pcie.link.gen.gpumax"：该 GPU 支持的最大 PCI-E 通道生成。
  * "pcie.link.hostmax"：该 GPU 所对应的根端口支持的最大 PCI-E 通道生成。
  * "pcie.link.width.current"：当前 PCI-E 通道宽度。这些可能会在 GPU 未使用时减少。
  * "pcie.link.width.max"：该 GPU 和系统配置可能支持的最大 PCI-E 通道宽度。例如，如果 GPU 支持更高的 PCI-E 通道代，那么此报告系统 PCI-E 通道代。
  * "index"：从 0 开始的 GPU 索引。每次重新启动时可能会发生变化。
  * "display_mode"：指示是否已连接到任何 GPU 的显示（例如监视器）。"启用" 表示已连接的显示。"禁用" 表示未连接的显示。
  * "display_active"：指示 GPU 是否已初始化显示。显示即使没有物理连接的显示器也可以启用。"启用" 表示已启用显示。"禁用" 表示未启用显示。
  * "persistence_mode"：指示是否启用持久模式。值为 "启用" 或 "禁用"。当持久模式启用时，NVIDIA 驱动程序将保持加载，即使没有活跃的 X11 或 nvidia-smi 等应用程序存在。这可以减少与运行的依赖应用程序相关的驱动程序加载延迟。仅适用于 Windows。Linux 不支持多个驱动模式，将始终具有值 "N/A"。仅对特定产品适用。请参阅功能矩阵中的 NVML 文档以获取更多信息。
  * "accounting.mode"：指示是否启用会计模式。值为 "启用" 或 "禁用"。当会计模式启用时，统计数据将为每个可查询的计算进程计算。在应用程序终止后，统计数据将更新为实际执行时间。使用 --help-query-accounted-apps 获取更多信息。
  * "accounting.buffer_size"：用于存储已查询应用程序的统计信息的环形缓冲区的大小。这是可以查询的计算进程的最大数量。
每个GPU板的inforom存储中存储的对象的版本号。inforom是一个小的、持久的存储配置和状态数据的GPU。所有inforom版本字段都是数值。了解这些版本号可能很有用，因为某些GPU功能仅在inforom的特定版本或更高版本下可用。

"inforom.img"或"inforom.image"
全局inforom图像版本。图像版本就像VBIOS版本一样，唯一地描述了闪存在板上的inforom的精确版本，而inforom对象版本仅是表示支持的特征的指示器。

"inforom.oem"
OEM配置数据的版本。

"inforom.ecc"
ECC记录数据的版本。

"inforom.pwr"或"inforom.power"
电源管理数据的版本。

关于gom属性的信息
GOM允许通过禁用GPU功能来减少功耗并优化GPU吞吐量。每个GOM都是为特定用户需求设计的。
在“全部打开”模式下，所有功能都启用并以全速运行。
“计算”模式仅用于运行计算任务。图形操作不允许。
“低双精度”模式设计用于运行需要低带宽双精度的图形应用程序。
GOM可以通过(--gom)标志进行更改。

gom.current或"gpu_operation_mode.current"
当前使用的GOM。
gom.pending或"gpu_operation_mode.pending"
下一个重新启动将使用的GOM。
“风扇速度”
风扇速度值是产品最大噪音容忍度风扇速度的百分之几，设备的风扇目前打算运行在该值上。此值可能在某些情况下超过100%。请注意：报告的速度是打算运行的风扇速度。如果风扇被物理阻塞并无法旋转，此输出将不会与实际风扇速度匹配。许多部件不报告风扇速度，因为它们依赖于周围外壳中的风扇进行冷却。

“pstate”
GPU当前性能状态。状态范围从P0（最大性能）到P12（最低性能）。

关于clocks_throttle_reasons属性的信息
检索降低时钟频率的因素的信息。如果所有限速原因都返回为“未激活”，则意味着时钟正在尽可能高速运行。

"clocks_throttle_reasons.supported"
支持的时钟限速原因位掩码。请参阅nvml.h以获取更多详细信息。

"clocks_throttle_reasons.active"
活动时钟限速原因位掩码。请参阅nvml.h以获取更多详细信息。

"clocks_throttle_reasons.gpu_idle"
没有正在运行的GPU，时钟已降至空闲状态。此限制器可能在后续发行版中被删除。

"clocks_throttle_reasons.applications_clocks_setting"
GPU时钟受到应用程序时钟设置的限制。例如，可以使用nvidia-smi --applications-clocks=更改此限制。

"clocks_throttle_reasons.sw_power_cap"
SW Power Scaling算法正在降低时钟，因为GPU消耗太多功率。例如，SW电源限制可以使用nvidia-smi --power-limit=更改此限制。

"clocks_throttle_reasons.hw_slowdown"
HW Slowdown（将核心时钟降低两倍或更多）被启用。这可能是：
HW Thermal Slowdown：温度过高
HW Power Brake Slowdown：外部电源制动请求被触发（例如，由系统电源供应）
* 电源消耗过高，快速触发保护正在降低时钟
* 可能在PState或时钟更改期间报告
* 此行为可能在后续发行版中被删除

"clocks_throttle_reasons.hw_thermal_slowdown"
HW Thermal Slowdown（将核心时钟降低两倍或更多）被启用。这可能是：
温度过高

"clocks_throttle_reasons.hw_power_brake_slowdown"
HW Power Brake Slowdown（将核心时钟降低两倍或更多）被启用。这可能是：
外部电源制动请求被触发（例如，由系统电源供应）
* 电源消耗过高，快速触发保护正在降低时钟
* 可能在PState或时钟更改期间报告
* 此行为可能在后续发行版中被删除

"clocks_throttle_reasons.sync_boost"
Sync Boost此GPU已添加到一个Sync boost组中，使用nvidia-smi或DCGM
* 为了最大化每瓦特的性能。整个组中的所有GPU都将降低到最低可能的时钟。查看其他GPU组中的throttle reasons以了解为什么这些GPU会将它们降低到较低的时钟。
CUDA Compute Capability，用 Major DOT Minor 表示。
NVIDIA GPU可以当出现多个单个位 ECC 错误或双位 ECC 错误时，将GPU设备内存页面标记为不可用。当一个页面被标记为不可用时，NVIDIA驱动程序会隐藏它，以便没有驱动程序或应用程序内存分配可以访问它。

"retired_pages.single_bit_ecc.count"或"retired_pages.sbe" 多个单个位 ECC 错误导致的GPU设备内存页面数量。

"retired_pages.double_bit.count"或"retired_pages.dbe" 双位 ECC 错误导致的GPU设备内存页面数量。

"retired_pages.pending" 检查下一个重新启动时是否有GPU设备内存页面处于待退休状态。处于待退休状态的页面仍然可以分配，可能会导致进一步的可靠性问题。

"temperature.gpu" GPU核心温度，单位为摄氏度。

"temperature.memory" HBM内存温度，单位为摄氏度。

"power.management" 表示是否启用电源管理，可能为"Supported"或"[Not Supported]"。需要Inforom PWR对象版本3.0或更高版本或Kepler设备。

"power.draw" 前一个板载整个板的功率测量值，单位为瓦特。只有在电源管理启用时才可用。此读数的精度为±5瓦特。

"power.limit" 软件电源限制，单位为瓦特。由软件如nvidia-smi设置。在Kepler设备上，Power Limit可以通过[-pl | --power-limit=]开关进行调整。

"enforced.power.limit" 电源管理算法的功率上限，单位为瓦特。整个板的功率消耗由电源管理算法控制，使其保持在该值以下。此值是各种功率限制器的最小值。

"power.default_limit" 默认电源管理算法的功率上限，单位为瓦特。电源限制将被重置为Default Power Limit在驱动程序卸载后。

"power.min_limit" 最小值，瓦特，电源限制可以设置为。

"power.max_limit" 最大值，瓦特，电源限制可以设置为。

"clocks.current.graphics"或"clocks.gr" 当前图形（着色器）时钟频率。

"clocks.current.sm"或"clocks.sm" 当前SM（流式多处理器）时钟频率。

"clocks.current.memory"或"clocks.mem" 当前内存时钟频率。

"clocks.current.video"或"clocks.video" 当前视频解码器/编码器时钟频率。

关于时钟应用程序属性的段落
用户指定的应用程序将运行在该频率上的时钟。可以使用[-ac | --applications-clocks]开关进行更改。

"clocks.applications.graphics"或"clocks.applications.gr" 用户指定的应用程序图形（着色器）时钟。

"clocks.applications.memory"或"clocks.applications.mem" 用户指定的应用程序内存时钟。

关于时钟.default_applications属性的段落
默认应用程序将运行在该频率上的时钟。应用程序时钟可以使用[-ac | --applications-clocks]开关进行更改。应用程序时钟可以使用[-rac | --reset-applications-clocks]开关重置为默认值。

"clocks.default_applications.graphics"或"clocks.default_applications.gr" 默认应用程序的图形（着色器）时钟。

"clocks.default_applications.memory"或"clocks.default_applications.mem" 默认应用程序的内存时钟。

关于时钟.max属性的段落
设计时部分GPU组件运行的最高频率。

"clocks.max.graphics"或"clocks.max.gr" 最高图形（着色器）时钟频率。

"clocks.max.sm"或"clocks.max.sm" 最高SM（流式多处理器）时钟频率。

"clocks.max.memory"或"clocks.max.mem" 最高内存时钟频率。

关于MIG模式属性的段落
一个指示MIG模式是否启用的标志。可能为"Enabled"或"Disabled"。MIG模式的更改需要一个GPU重置。

"Mig.mode.current" 当前GPU正在运行的MIG模式。

"Mig.mode.pending" GPU重置后将运行的MIG模式。

"fabric.state" 当前GPU fabric注册过程的状态。

"fabric.status" 错误状态，仅在GPU fabric注册状态为"完成"时有效。

----总结----
这段话是关于 NVIDIA GPU 查询属性的说明。其中列出了一些可用于查询 NVIDIA GPU 的属性，包括查询时间戳、驱动程序版本、异构多显卡限制、GPU数量、名称/序列号等。还提到了 "vgpu_device_capability" 属性，该属性可用于查询 GPU 的多种限制和配置信息。最后，还提到了 "clocks_throttle_reasons" 属性，该属性可用于检索降低时钟频率的因素的信息。
NVIDIA GPU可以标记不可用的GPU设备内存页面，当出现多个单个位或双位ECC错误时。"retired_pages.single_bit_ecc.count"或"retired_pages.sbe"表示单个位ECC错误导致的GPU设备内存页面数量，"retired_pages.double_bit.count"或"retired_pages.dbe"表示双位ECC错误导致的GPU设备内存页面数量，"retired_pages.pending"表示检查下一个重新启动时是否有GPU设备内存页面处于待退休状态。此外，还可以查看GPU核心温度、HBM内存温度、电源管理、功率消耗、时钟频率等信息。

----性能----
原文长度:19763    译文长度:6360 总结长度: 510
翻译耗时: 342.4907063sec 负载:37.477203 已用显存:20835.887 显卡功耗:129.99013
总结耗时:28.7626937sec 负载:38.357143 已用显存:20884.678 显卡功耗:141.88786
